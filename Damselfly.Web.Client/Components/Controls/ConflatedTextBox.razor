<div class="SearchBox">
    <div class="SearchFieldIcon" title="@placeholder">
        <i class="fa @IconClass"/>
    </div>
    <input class="SearchField" autocomplete="off" placeholder="@placeholder" id="@id" for="searchBox" 
                    @bind-value="TextValue" @bind-value:after="TextChanged" @bind-value:event="oninput"/>
    @if( CanClear )
    {
        <div class="SearchFieldClear" title="Clear Filter" @onclick="@ClearText">
            <i class="fa fa-times"/>
        </div>
    }
</div>

@code {

    [Parameter] public string IconClass { get; set; }

    [Parameter] public string placeholder { get; set; }
    
    [Parameter] public string TextValue { get; set; }

    [Parameter] public string id { get; set; }
    
    [Parameter] public EventCallback<string> TextValueChanged { get; set; }

    private bool CanClear { get; set; }
    private AsyncEventConflator conflator = new();
    private string oldValue;

    private async Task ClearText()
    {
        TextValue = string.Empty;
        await TextChanged();
    }

    private async Task TextChanged()
    {
        if( oldValue != TextValue )
        {
            oldValue = TextValue;
            CanClear = !string.IsNullOrEmpty(TextValue);
            await conflator.ConflateAsync(_ => ChangeCallback());
        }
    }

    private async Task ChangeCallback()
    {
        StateHasChanged();
        await TextValueChanged.InvokeAsync(TextValue);
    }
}