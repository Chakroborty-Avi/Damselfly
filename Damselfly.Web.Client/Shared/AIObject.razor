@inject IPeopleService peopleService
@inject IUserStatusService statusService
@inject ILogger<AIObject> logger

<div class="object" title="@ObjectName" style="@ObjectStylePos" id="@theObject.PersonId">
    @if( Editing )
    {
        <div class="object-editor">
            <BlazoredTypeahead SearchMethod="SearchNames" EnableDropDown="false"
                               placeholder="Enter a Name" Debounce="100"
                               @bind-Value="@TypeAheadName" @onblur="@LostFocus">
                <SelectedTemplate>
                    @{
                        _ = UpdateName(context);
                    }
                </SelectedTemplate>
                <ResultTemplate>
                    @context
                </ResultTemplate>
                <NotFoundTemplate>
                    @tagSearchText
                </NotFoundTemplate>
            </BlazoredTypeahead>
        </div>
    }
    else
    {
        <div class="object-text" @onclick="EditName" title="Click to Edit">@ObjectName</div>
    }
</div>

@code {

    [Parameter]
    public ImageObject theObject { get; set; }

    [Parameter]
    public Action<ImageObject> OnObjectChanged { get; set; }

    private bool Editing { get; set; }

    private string TypeAheadName { get; set; }
    private string tagSearchText { get; set; }

    public string ObjectName => theObject.ToString();
    public string ObjectTitle => $"{ObjectName} - click to edit";

    private string ObjectStylePos
    {
        get
        {
            var imgWidth = theObject.Image.MetaData.Width > 0 ? theObject.Image.MetaData.Width : 800;
            var imgHeight = theObject.Image.MetaData.Height > 0 ? theObject.Image.MetaData.Height : 800;

            var xPercent = theObject.RectX * 100 / imgWidth;
            var yPercent = theObject.RectY * 100 / imgHeight;
            var wPercent = theObject.RectWidth * 100 / imgWidth;
            var hPercent = theObject.RectHeight * 100 / imgHeight;
            var pos = $"top:{yPercent}%;left:{xPercent}%;width:{wPercent}%;height:{hPercent}%;";

            return pos;
        }
    }

    private void LostFocus()
    {
        Editing = false;
        StateHasChanged();
    }

    private void EditName()
    {
        if( !Editing && theObject.Type == ImageObject.ObjectTypes.Face.ToString() )
        {
            Editing = true;
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<string>> SearchNames(string text)
    {
        var searchText = text.Trim();
        IEnumerable<string> results = new List<string>();

        // Store the search text which is used in the NotFound template
        tagSearchText = searchText;

        // Only query the DB if we have more than 2 chars.
        if( searchText.Length > 1 )
        {
            var names = await peopleService.GetPeopleNames(searchText);

            if( !names.Contains(searchText, StringComparer.OrdinalIgnoreCase) )
                names.Insert(0, searchText);

            results = names;
        }

        return results;
    }

    private async Task UpdateName(string name)
    {
        if( !string.IsNullOrEmpty(name) )
        {
            logger.LogInformation($"Saving name: {name}");
            TypeAheadName = null;

            StateHasChanged();

            await peopleService.UpdateName(theObject, name);

            statusService.UpdateStatus($"Name saved as '{name}'");

            // Reset the tag
            Editing = false;

            OnObjectChanged?.Invoke( theObject);
        }
    }

}