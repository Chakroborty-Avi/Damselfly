

@implements IDisposable

@inject IDialogService DialogService
@inject IBasketService basketService
@inject NavigationManager NavigationManager
@inject IUserService userService
@inject IConfigService userConfigService
@inject ILogger<BasketManager> logger

<ErrorBoundary>
    <div class="SearchBox">
        <div class="SearchFieldIcon" title="Saved Baskets"><i class="fas fa-shopping-basket" /></div>
        <select @bind="SelectedBasketId" class="SearchField">
            @foreach (var basket in baskets)
            {
                <option value="@basket.BasketId">@basket.Name @PrivateIndicator(basket)</option>
            }
        </select>
    </div>
</ErrorBoundary>
@code {
    readonly List<Basket> baskets = new List<Basket>();
    string NewBasketName { get; set; }

    private int SelectedBasketId
    {
        get { return basketService.CurrentBasket == null ? -1 : basketService.CurrentBasket.BasketId; }
        set { _ = NewBasketSelected(value); }
    }

    private async Task NewBasketSelected(int selectedBasketId)
    {
        logger.LogInformation($"Switching to basket: {selectedBasketId}");
        var newBasket = await basketService.SwitchBasketById(selectedBasketId);
        userConfigService.Set(ConfigSettings.SelectedBasketId, newBasket.BasketId.ToString());
        StateHasChanged();
    }

    private string PrivateIndicator(Basket basket)
    {
        if (userService.RolesEnabled)
        {
            // Shared baskets don't make sense if users and roles are disabled.
            if (basket != null && ! basket.UserId.HasValue)
            {
                return "(shared)";
            }
        }

        return string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            basketService.OnBasketChanged += BasketsChanged;

            await LoadBasketList();

            var selectedBasketId = userConfigService.GetInt(ConfigSettings.SelectedBasketId, -1);
            if (selectedBasketId > 0)
                await basketService.SwitchBasketById(selectedBasketId);
            else
                await basketService.SwitchToDefaultBasket(userService.UserId);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        basketService.OnBasketChanged -= BasketsChanged;
    }

    private void BasketsChanged()
    {
        _ = LoadBasketList();
        StateHasChanged();
    }

    public async Task LoadBasketList()
    {
        var watch = new Stopwatch("LoadBaskets");

        var myBaskets = await basketService.GetUserBaskets(userService.UserId);

        this.baskets.Clear();
        this.baskets.AddRange(myBaskets);
        watch.Stop();
    }
}

