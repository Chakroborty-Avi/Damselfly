@using System.ComponentModel.DataAnnotations
@inject IPeopleService peopleService
@inject IUserBasketService basketService
@inject IUserService userService
@inject IUserStatusService statusService
@inject IConfigService configService
@inject ILogger<BasketDialog> logger

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Add Name </MudText>
    </TitleContent>
    <DialogContent>
        <MudAutocomplete T="string" Placeholder="Add Name" SearchFunc="SearchNames"
                         @bind-Value="@TypeAheadName" @bind-Value:after="CheckForMerge"
                         ShowProgressIndicator="true" MinCharacters="2" OnBlur="CheckForMerge"
                         CoerceValue="true" DebounceInterval="250" Clearable="true" Immediate="false"
                         Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Sell"
                         Variant="UIConstants.MudVariant" AutoFocus="true"/>
        @if( showDupeMessage )
        {
            <div class="merge-message">
                There is already an entry for '@TypeAheadName'. By selecting that Name, you will
                merge/add this face to that person.
            </div>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if( showDupeMessage )
        {
            <MudButton Color="Color.Primary" ButtonType="MudBlazor.ButtonType.Submit"
                       OnClick="Merge">
                Merge with @TypeAheadName
            </MudButton>
        }
        else
        {
            <MudButton Color="Color.Primary" ButtonType="MudBlazor.ButtonType.Submit"
                       OnClick="Save">
                Save as @TypeAheadName
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public ImageObject theObject { get; set; }

    private string TypeAheadName { get; set; }
    private bool showDupeMessage = false;

    protected override void OnInitialized()
    {
        if( theObject.Person != null && theObject.Person.Name != null )
        {
            TypeAheadName = theObject.Person.Name;
        }
    }

    private async Task<IEnumerable<string>> SearchNames(string text, CancellationToken _)
    {
        var list = await peopleService.GetPeopleNames(text.Trim());
        return list;
    }

    private async Task CheckForMerge()
    {
        if( TypeAheadName != "Unknown" )
        {
            var allNames = await peopleService.GetPeopleNames(TypeAheadName);

            // First, check if the name is the same as somebody else in the system. 
            var showDupe = allNames.Contains(TypeAheadName, StringComparer.OrdinalIgnoreCase);

            if( showDupeMessage != showDupe )
            {
                showDupeMessage = showDupe;
                StateHasChanged();
            }
        }
    }

    private async Task Save()
    {
        var req = new NameChangeRequest { ImageObjectId = theObject.ImageObjectId, PersonId = theObject.PersonId, NewName = TypeAheadName };
        await peopleService.UpdatePersonName(req);

        statusService.UpdateStatus($"Name saved as '{TypeAheadName}'");

        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task Merge()
    {
        var req = new NameChangeRequest { ImageObjectId = theObject.ImageObjectId, PersonId = theObject.PersonId, NewName = TypeAheadName, Merge = true };
        await peopleService.UpdatePersonName(req);

        statusService.UpdateStatus($"Face merged with '{TypeAheadName}'");

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

}