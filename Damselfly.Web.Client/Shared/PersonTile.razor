@inject IPeopleService peopleService
@inject IUserStatusService statusService
@inject ViewDataService ViewDataService
@inject IJSRuntime JsRuntime
@inject IImageCacheService imageCache
@inject IDialogService dialogService

<div class="damselfly-persontile">
    <div title="@Person.PersonGuid" class="damselfly-personimg">
        <NavLink href="@PersonLink">
            <img @key="@Person.PersonId" title="@PersonTitle" src="@FaceLink">
        </NavLink>
    </div>
    @if( processingUpdate )
    {
        <div class="damselfly-personfield">
            Updating name...
        </div>
    }
    else
    {
        <div class="damselfly-personfield">
            <MudTextField @key="@Person.PersonId" @bind-Value="@Name" ReadOnly="false" Variant="UIConstants.MudVariant"/>
        </div>
    }
</div>

@code {
    private string PersonTitle => $"{Person.Name}\nState: {Person.State}\nFace Data Sets: {Person.FaceData.Count}";
    private bool processingUpdate = false;
    
    [Parameter]
    public Person Person { get; set; }
    
    [Parameter]
    public EventCallback PersonChanged { get; set; }

    public string Name
    {
        get => Person.Name;
        set => _ = UpdateName(value);
    }

    public string FaceLink => $"/face/{Person.PersonId}?nocache={Person.LastUpdated:yyyyMMddHHmmss}";
    public string PersonLink => $"/?personid={Person.PersonId}";

    private async Task UpdateName(string newName)
    {
        if( !string.IsNullOrEmpty(newName) && !newName.Equals(Person.Name) )
        {
            processingUpdate = true;
            StateHasChanged();
            
            var allNames = await peopleService.GetPeopleNames(newName);
            bool canRename = true;
            bool merge = false;

            // If the new name already exists for another person, then we're going to merge 
            // them together to form a single person. 
            if( allNames.Contains(newName, StringComparer.OrdinalIgnoreCase) )
            {
                canRename = false;

                bool? result = await dialogService.ShowMessageBox(
                    $"Merge with existing {newName}?",
                    $"A person with the name '{newName}' exists already. Would you like to merge the two?",
                    yesText: "Merge", cancelText: "Cancel");

                if( result != null && result.Value )
                {
                    canRename = true;
                    merge = true;
                }
            }

            _ = JsRuntime.InvokeAsync<string>("clearFocus");

            if( canRename )
            {
                var req = new NameChangeRequest { PersonId = Person.PersonId, NewName = newName, Merge = merge };
                await peopleService.UpdatePersonName(req);

                // Update the local copy
                Person.Name = newName;

                // Massive hammer to crack a small nut. We've changed the name of a person, and any 
                // number of imageObjects could be cached with the old name. So evict them all. 
                // Performance hit, of course, but better than showing stale names.
                await imageCache.ClearCache();

                await PersonChanged.InvokeAsync();
                processingUpdate = false;
                StateHasChanged();

                statusService.UpdateStatus($"Name set to '{newName}'");
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if( firstRender )
        {
            ViewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowBasket = true, ShowFolderList = true });
        }
    }

}