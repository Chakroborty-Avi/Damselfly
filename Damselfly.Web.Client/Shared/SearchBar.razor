@using Damselfly.Web.Data
@using Damselfly.Core.Utils.Images;

@inject IDialogService DialogService
@inject SearchService searchService
@inject UserStatusService statusService
@inject UserConfigService configService
@inject NavigationManager NavigationManager

@implements IDisposable

<div class="damselfly-searchbar">
    <div class="damselfly-searchfilter">
        <ConflatedTextBox IconClass="fa-search" id="searchBox" placeholder="Enter a search term" OnValueChanged="@DoSearch" TextValue="@searchService.SearchText" />
    </div>
    <div class="damselfly-searchhint">
        <button class="btn btn-primary damselfly-searchtools" title="Refresh Search" @onclick="@(() => searchService.Refresh())"><i class="fas fa-redo-alt" /></button>
        <button class="btn btn-primary damselfly-searchtools" title="Reset Search" @onclick="@(() => searchService.Reset())"><i class="fas fa-times" /></button>
        <button class="btn btn-primary damselfly-searchtools" title="Advanced Search" @onclick="@(() => ToggleAdvancedSearch())">
            @if (ShowAdvancedSearch)
            {
                <i class="fas fa-chevron-up" />
            }
            else
            {
                <i class="fas fa-chevron-down" />
            }
        </button>
        <button class="btn btn-primary damselfly-searchtools" title="People Management" @onclick="@PeopleManagement"><i class="fas fa-users" /></button>
        <button class="btn btn-primary damselfly-searchtools" title="Tag Management" @onclick="@TagManagement"><i class="fas fa-tags" /></button>
        <label class="damselfly-browsetoollabel" title="Current Search Parameters">@searchService.SearchBreadcrumbs</label>
    </div>

    <div class="damselfly-browsetools">
        <select class="damselfly-browsetool damselfly-browsetool-select" @bind="SelectedGrouping">
            <option value="@SearchQuery.GroupingType.None">Timeline</option>
            <option value="@SearchQuery.GroupingType.Date">Date</option>
            <option value="@SearchQuery.GroupingType.Folder">Folder</option>
        </select>
        <div class="damselfly-browsetool @SelectedStyle( ThumbSize.Small )"><i title="Small Thumbnails" class="fas fa-image" style="font-size:smaller;" @onclick="() => ChangeThumbSize(ThumbSize.Small)" /></div>
        <div class="damselfly-browsetool @SelectedStyle( ThumbSize.Medium )"><i title="Medium Thumbnails" class="fas fa-image" @onclick="() => ChangeThumbSize(ThumbSize.Medium)" /></div>
        <div class="damselfly-browsetool @SelectedStyle( ThumbSize.Large )"><i title="Large Thumbnails" class="fas fa-image" style="font-size:larger;" @onclick="() => ChangeThumbSize(ThumbSize.Large)" /></div>
        @if (searchService.SortOrder == SearchQuery.SortOrderType.Descending)
        {
            <div class="damselfly-browsetool"><i title="Sort Ascending" class="fas fa-sort-amount-up" @onclick="() => ChangeSortOrder(SearchQuery.SortOrderType.Ascending)" /></div>
        }
        else
        {
            <div class="damselfly-browsetool"><i title="Sort Descending" class="fas fa-sort-amount-down" @onclick="() => ChangeSortOrder(SearchQuery.SortOrderType.Descending)" /></div>
        }
    </div>
    @if (ShowAdvancedSearch)
    {
        <AdvancedSearchPanel />
    }
</div>

@code {

    [Parameter]
    public Action<ThumbSize> OnThumbSizeChanged { get; set; }

    ThumbSize CurrentThumbSize = ThumbSize.Small;
    bool ShowAdvancedSearch { get; set; } = false;

    private SearchQuery.GroupingType SelectedGrouping { get { return searchService.Grouping; } set { ChangeGroupType(value); } }

    private void ChangeThumbSize(ThumbSize newSize)
    {
        CurrentThumbSize = newSize;
        OnThumbSizeChanged?.Invoke(newSize);
        StateHasChanged();
    }

    private string SelectedStyle(ThumbSize size)
    {
        return CurrentThumbSize != size ? "damselfly-browsetool-deselected" : String.Empty;
    }

    protected override void OnInitialized()
    {
        CurrentThumbSize = configService.Get<ThumbSize>(ConfigSettings.ThumbSize, ThumbSize.Small);
        OnThumbSizeChanged?.Invoke(CurrentThumbSize);
    }

    private void ToggleAdvancedSearch()
    {
        ShowAdvancedSearch = !ShowAdvancedSearch;
        StateHasChanged();
    }

    private void PeopleManagement()
    {
        try
        {
            NavigationManager.NavigateTo("/people");
        }
        catch (Exception ex)
        {
            Logging.LogError("Exception: " + ex.Message);
        }
    }

    private void TagManagement()
    {
        try
        {
            NavigationManager.NavigateTo("/tags");
        }
        catch (Exception ex)
        {
            Logging.LogError("Exception: " + ex.Message);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            searchService.OnSearchChanged += SearchQueryChanged;
        }
    }

    public void Dispose()
    {
        searchService.OnSearchChanged -= SearchQueryChanged;
    }

    protected void SearchQueryChanged()
    {
        _ = InvokeAsync(StateHasChanged);
    }

    private void DoSearch(string searchTerm)
    {
        if (!string.IsNullOrEmpty(searchTerm))
            statusService.StatusText = $"Searching for keyword: {searchTerm}...";
        searchService.SearchText = searchTerm;
    }

    private void ChangeGroupType(SearchQuery.GroupingType newType)
    {
        searchService.Grouping = newType;
        Logging.Log($"Grouping changed to {searchService.Grouping}");
        StateHasChanged();
    }

    private void ChangeSortOrder(SearchQuery.SortOrderType newType)
    {
        searchService.SortOrder = newType;
        Logging.Log($"Sort order changed to {searchService.SortOrder}");
        StateHasChanged();
    }
}
