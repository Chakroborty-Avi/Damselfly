@using System.Linq
@using Blazored.Typeahead

@inject ITagSearchService tagSearchService
@inject NavigationService navContext
@inject NavigationManager NavigationManager
@inject ContextMenuService contextMenuService

<div class="SearchBox">
    <div class="SearchFieldIcon" title="Add Tags/Keywords"><i class="fa fa-tag" /></div>
    <BlazoredTypeahead disabled="@IsDisabled" class="SearchField" SearchMethod="SearchTags" EnableDropDown="false"
                       placeholder="Add a keyword" Debounce="100"
                       @bind-Value="@TypeAheadTag" @ref="_typeaheadCtrl">
        <SelectedTemplate>
            @{
                CreateNewTags(context);
            }
        </SelectedTemplate>
        <ResultTemplate>
            @context
        </ResultTemplate>
        <NotFoundTemplate>
            @tagSearchText
        </NotFoundTemplate>
    </BlazoredTypeahead>
</div>

@code {
    private string TypeAheadTag { get; set; }
    private string tagSearchText { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter]
    public Action<string> OnAddNewtag { private get; set; }

    private BlazoredTypeahead<string, string> _typeaheadCtrl;

    protected override void OnParametersSet()
    {
        // TODO https://github.com/dotnet/aspnetcore/issues/11815
        if (OnAddNewtag == null)
            throw new ArgumentException("No callback specified for OnAddNewTag!");

        base.OnParametersSet();
    }

    private void CreateNewTags(string tag)
    {
        if (!string.IsNullOrEmpty(tag))
        {
            Logging.Log("Saving new tag: " + tag);

            // Reset the tag
            TypeAheadTag = null;
            StateHasChanged();

            // Call the callback
            OnAddNewtag(tag);

            if (_typeaheadCtrl != null)
                _ = _typeaheadCtrl.Focus();
        }
    }

    private async Task<IEnumerable<string>> SearchTags(string text)
    {
        var results = await tagSearchService.SearchTags(text);
        return results.Select(x => x.Keyword);
    }
}