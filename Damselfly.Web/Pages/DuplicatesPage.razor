@page "/duplicates"

@using Microsoft.EntityFrameworkCore
@using System.Collections.Generic;

@inject NavigationService navContext
@inject ViewDataService ViewDataService
@inject ImageCache imageCache

<div class="damselfly-export">
    <div class="damselfly-pagetitlebar">
        <NavBack />
        <h4 class="damselfly-imagetitle">
            Images with Duplicates
        </h4>
    </div>
    <div class="damselfly-dupelist">
        @if (imageLists != null)
        {
            @foreach (var list in imageLists)
            {
                <div class="damselfly-duplicate">
                    <div class="damselfly-dupeimage">
                        <img src="@GetImgUrl(list[0])" />
                    </div>

                    <div class="damselfly-dupe-entries">
                        @foreach (var img in list)
                        {
                            <div class="damselfly-dupe-entry">
                                @img.FullPath, Date Taken: @img.SortDate.Display()
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <p>Loading selection...</p>
        }
    </div>
</div>

@code {
    public Image CurrentImage { get; set; }

    List<List<Image>> imageLists = new List<List<Image>>();

    private string GetImgUrl(Image image)
    {
        return $"/thumb/{ThumbSize.Small}/{image.ImageId}?nocache={image.LastUpdated:yyyyMMddHHmmss}";
    }

    public async Task<List<List<Image>>> LoadData()
    {
        var watch = new Stopwatch("DupesLoadData");
        imageLists.Clear();

        imageLists = await GetImagesWithDuplicates();
        watch.Stop();

        return imageLists;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ViewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowExport = true });

            await LoadData();

            StateHasChanged();
        }
    }

    /// <summary>
    /// TODO: Move to duplicatesService
    /// </summary>
    /// <returns></returns>
    public async Task<List<List<Image>>> GetImagesWithDuplicates()
    {
        using var db = new ImageContext();
        var watch = new Stopwatch("GetImagesWithDupes");

        // Craft the SQL manually as server-side groupby isn't supported by EF Core.
        // Select all images that have the same hash as more than one image.
        var subQuery = @"SELECT MD5ImageHash FROM Hashes
                        WHERE MD5ImageHash IS NOT NULL AND MD5ImageHash <> ""
                        GROUP BY MD5ImageHash HAVING COUNT( DISTINCT ImageID ) > 1";
        var sql = $"SELECT h.* FROM hashes h WHERE h.MD5ImageHash IN ({subQuery})";

        var dupeImages = await db.Hashes.FromSqlRaw(sql)
                                .Where(x => x.MD5ImageHash != null)
                                .Include(x => x.Image)
                                .Select(x => x.ImageId)
                                .ToListAsync();

        var cachedImages = await imageCache.GetCachedImages(dupeImages);

        // Group by the hash and pick all of the images for each one.
        var listOfLists = cachedImages.GroupBy(x => x.Hash.MD5ImageHash)
                                  .Select(x => x.OrderBy(x => x.SortDate).ToList())
                                  .ToList();

        watch.Stop();

        return listOfLists;
    }
}
