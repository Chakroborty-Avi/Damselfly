@page "/image"
@page "/image/{ImageID}"

@inject ThumbnailService thumbService
@inject NavigationService navContext
@inject NavigationManager NavigationManager
@inject ViewDataService ViewDataService
@inject UserConfigService configService
@inject IndexingService indexService
@inject ImageCache imageCache         
@inject IJSRuntime JsRuntime
@implements ICropHelper

<div class="damselfly-imageview" @ref="ImageView" id="test-container-keydown" style="outline: none;" tabindex="0" @onkeydown="OnKeyDown">
    @if (CurrentImage == null)
    {
<div class="col">
    <p><em>Error. Image not found!</em></p>
</div> }
else
{
<div class="damselfly-imagetools">
    <div class="damselfly-imagetitlenav">
        <NavBack />
    </div>
    <div class="damselfly-imagebuttons">
        <ToolbarButton IconStyle="fa-chevron-left" OnClickCallback="@Prev" Enabled="@PrevEnabled" title="Previous Image" />
        <ToolbarButton IconStyle="fa-search" OnClickCallback="@ToggleZoom" Selected="@ZoomEnabled" title="Toggle Zoom" />
        <ToolbarButton IconStyle="fa-object-ungroup" OnClickCallback="@ToggleShowObjects" Selected="@ShowObjects" title="Show AI Objects/Faces" />
        <AuthorizeView Policy="@PolicyDefinitions.s_IsDownloader">
            <ToolbarButton IconStyle="fa-download" OnClickCallback="@DownloadImage" title="Download Image" />
        </AuthorizeView>
        <AuthorizeView Policy="@PolicyDefinitions.s_IsEditor">
            <ToolbarButton IconStyle="fa-sync-alt" OnClickCallback="@RefreshImage" title="Re-scan Image Metadata" />
        </AuthorizeView>
        <!--ToolbarButton IconStyle="fa-facebook" title="Share on Facebook" onclick="
        window.open(
            '@FaceBookShareUrl',
            'facebook-share-dialog',
            'width=626,height=436');
        return false;" />
    <ToolbarButton IconStyle="fa-crop" Enabled="false" title="Crop/Select Image" /-->

        <ToolbarButton IconStyle="fa-chevron-right" OnClickCallback="@Next" Enabled="@NextEnabled" title="Next Image" />
    </div>
    <div class="damselfly-imagetitle" title="@CurrentImage.FullPath">
        <h4>
            @CurrentImage.FileName
        </h4>
    </div>
</div>

    <ImagePreview @ref="theImagePreview" @key="@ImageID" Image="@CurrentImage" />}
</div>

@code {
    [Parameter]
    public string ImageID { get; set; }

    private Image CurrentImage;
    private Image nextImage;
    private Image prevImage;
    private ElementReference ImageView;

    private bool ZoomEnabled => theImagePreview == null ? false : theImagePreview.ZoomEnabled;
    private bool ShowObjects => theImagePreview == null ? false : theImagePreview.ShowObjects;

    private ImagePreview theImagePreview;
    public string ImgKey => $"prev{CurrentImage.ImageId}";
    public string ImgPreviewKey => $"{CurrentImage.ImageId}";
    public string ImageUrl { get; set; }
    public string ImageUrlHighRes { get; set; }

    public CropJsHelper JsHelper { get; set; }

    private bool NextEnabled => nextImage != null && nextImage.ImageId != CurrentImage.ImageId;
    private bool PrevEnabled => prevImage != null && prevImage.ImageId != CurrentImage.ImageId;
    private string PrevImageIDUrl => $"/image/{prevImage.ImageId}";
    private string NextImageIDUrl => $"/image/{nextImage.ImageId}";

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public string FaceBookShareUrl
    {
        get
        {
            var url = "http://localhost:6363" + $"/thumb/{ThumbSize.Large}/{ImageID}";
            var imageUrl = System.Net.WebUtility.UrlEncode(url);
            return $"https://www.facebook.com/sharer/sharer.php?u={imageUrl}";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await SetUpNavigation();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ViewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowImageProps = true, ShowTags = true, ShowMap = true });

            //this.JsHelper = new CropJsHelper(this);
            //await JsRuntime.InvokeAsync<string>("doImageCrop", "theImage", DotNetObjectReference.Create(JsHelper));

            await SetUpNavigation();

            _ = ImageView.FocusAsync();
        }
    }

    private void ToggleShowObjects()
    {
        theImagePreview.ToggleShowObjects();
    }

    private void ToggleZoom()
    {
        theImagePreview.ToggleZoomEnabled();
    }

    protected void ReplaceUrl(ProgressEventArgs args)
    {
        Logging.Log("Replacing Image URL");
        ImageUrl = ImageUrlHighRes;
        StateHasChanged();
    }


    [JSInvokable]
    // Debugging assistant to help us differentiate between JS calls and other data loads
    public void CompleteCrop(CropData cropData)
    {
        Logging.Log($"Crop complete: {cropData.Left}");
    }

    protected async Task SetUpNavigation()
    {
        if (Int32.TryParse(ImageID, out var imageId))
        {
            CurrentImage = await imageCache.GetCachedImage(imageId, null);
            navContext.CurrentImage = CurrentImage;

            ImageUrl = CurrentImage.ThumbUrl( ThumbSize.Medium );
            ImageUrlHighRes = CurrentImage.ThumbUrl(ThumbSize.ExtraLarge); ;

            nextImage = await navContext.GetNextImageAsync(true);
            prevImage = await navContext.GetNextImageAsync(false);

            StateHasChanged();
        }
    }

    private void Next()
    {
        if (nextImage != null && nextImage.ImageId != CurrentImage.ImageId)
            NavigationManager.NavigateTo("/image/" + nextImage.ImageId);

    }

    private void Prev()
    {
        if (prevImage != null && prevImage.ImageId != CurrentImage.ImageId)
            NavigationManager.NavigateTo("/image/" + prevImage.ImageId);
    }

    public void RefreshImage()
    {
        _ = indexService.MarkImagesForScan(new List<Image>() { CurrentImage });
    }

    public async Task DownloadImage()
    {
        try
        {
            await JsRuntime.InvokeAsync<string>("downloadFile", CurrentImage.DownloadImageUrl);
        }
        catch (Exception ex)
        {
            Logging.LogError("Exception: " + ex.Message);
        }
    }


    void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowRight")
        {
            Next();
        }
        else if (e.Key == "ArrowLeft")
        {
            Prev();
        }
        else if( e.Key == "Escape")
        {
            NavigationManager.NavigateTo("/");
        }
    }
}
