@page "/map"

@inject SelectionService selectionService
@inject NavigationService navContext
@inject IUserBasketService basketService
@inject ViewDataService viewDataService
@using Orientation = Syncfusion.Blazor.Maps.Orientation
@using Syncfusion.Blazor.Maps
@using MarkerType = Syncfusion.Blazor.Maps.MarkerType
@implements IDisposable


<div class="damselfly-tagview">
    <SfMaps Height="100%" Width="100%">
        <MapsAreaSettings Background="var(--main-background)">
            <MapsBorder Color="var(--keyword-border)" Width="0"></MapsBorder>
            <MapsMargin Bottom="0" Left="0" Right="0" Top="0"></MapsMargin>
        </MapsAreaSettings>
        <MapsZoomSettings MaxZoom="20" MinZoom="2" Enable="true" ShouldZoomInitially="true" MouseWheelZoom="true" DoubleClickZoom="true" PinchZooming="true">
            <MapsZoomToolbarSettings Orientation="Orientation.Vertical"
                                     HorizontalAlignment="Alignment.Near"
                                     VerticalAlignment="Alignment.Near">
                <MapsZoomToolbarButton BorderColor="white" BorderOpacity="0.5" BorderWidth="2" Color="yellow" Fill="darkgreen" HighlightColor="white" Opacity="1"
                                       Padding="5" Radius="30" SelectionColor="green"
                                       ToolbarItems="new List<ToolbarItem> { ToolbarItem.ZoomIn, ToolbarItem.ZoomOut, ToolbarItem.Reset }">
                </MapsZoomToolbarButton>
            </MapsZoomToolbarSettings>
        </MapsZoomSettings>
        @if( centrePoint != null )
        {
            <MapsCenterPosition Latitude="@centrePoint.Latitude" Longitude="@centrePoint.Longitude"/>
        }
        <MapsLayers>
            <MapsLayer AnimationDuration="500" UrlTemplate="https://a.tile.openstreetmap.org/level/tileX/tileY.png" TValue=" string ">
                @if( HasMarkers )
                {
                    <MapsMarkerClusterSettings AllowClustering="true" AllowClusterExpand="true" Shape="MarkerType.Circle" Fill="#008CFF" Height="25" Width="25">
                        <MapsLayerMarkerClusterLabelStyle Color="white"></MapsLayerMarkerClusterLabelStyle>
                    </MapsMarkerClusterSettings>
                }
                <MapsMarkerSettings>
                    <MapsMarker Visible="true" Height="20" Width="20" Fill="red" DataSource="@Markers" AnimationDuration="0" TValue=" MarkerData "/>
                </MapsMarkerSettings>
            </MapsLayer>
        </MapsLayers>
    </SfMaps>
</div>

@code {

    public List<MarkerData> Markers = new();
    bool HasMarkers => Markers != null && Markers.Any();
    MarkerData centrePoint;

    public class MarkerData
    {
        public string Name { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    protected override void OnInitialized()
    {
        viewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowFolderList = true, ShowBasket = true, ShowTags = true });

        navContext.OnChange += NavigationChanged;
        selectionService.OnSelectionChanged += SelectionChanged;
    }

    public void Dispose()
    {
        navContext.OnChange -= NavigationChanged;
        selectionService.OnSelectionChanged -= SelectionChanged;
    }

    private void NavigationChanged(Image image)
    {
        _ = UpdateMarkers();
    }

    private void SelectionChanged()
    {
        _ = UpdateMarkers();
    }

    private async Task UpdateMarkers()
    {
        Markers.Clear();

        var images = selectionService.Selection;

        if( !images.Any() )
        {
            if( basketService.CurrentBasket != null )
                images = basketService.CurrentBasket.BasketEntries.Select(x => x.Image).ToList();
        }

        if( images != null && images.Any() )
        {
            var newMarkers = images
                .Where(x => x.MetaData != null && x.MetaData.Latitude.HasValue && x.MetaData.Longitude.HasValue)
                .Select(x => new MarkerData { Name = x.FileName, Latitude = x.MetaData.Latitude.Value, Longitude = x.MetaData.Longitude.Value })
                .ToList();

            centrePoint = GetCentralGeoCoordinate(newMarkers);

            Markers.AddRange(newMarkers);

            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if( firstRender )
        {
            await UpdateMarkers();
        }
    }

    public static MarkerData GetCentralGeoCoordinate(
        IList<MarkerData> geoCoordinates)
    {
        if( geoCoordinates.Count == 1 )
        {
            return geoCoordinates.Single();
        }

        double x = 0;
        double y = 0;
        double z = 0;

        foreach( var geoCoordinate in geoCoordinates )
        {
            var latitude = geoCoordinate.Latitude * Math.PI / 180;
            var longitude = geoCoordinate.Longitude * Math.PI / 180;

            x += Math.Cos(latitude) * Math.Cos(longitude);
            y += Math.Cos(latitude) * Math.Sin(longitude);
            z += Math.Sin(latitude);
        }

        var total = geoCoordinates.Count;

        x = x / total;
        y = y / total;
        z = z / total;

        var centralLongitude = Math.Atan2(y, x);
        var centralSquareRoot = Math.Sqrt(x * x + y * y);
        var centralLatitude = Math.Atan2(z, centralSquareRoot);

        return new MarkerData { Name = "Centre", Latitude = centralLatitude * 180 / Math.PI, Longitude = centralLongitude * 180 / Math.PI };
    }

}