@inject SearchService searchService
@inject IndexingService indexService
@inject FolderService folderService
@inject UserFolderService userFolderService
@inject ImageRecognitionService aiService
@inject ContextMenuService contextMenuService
@inject IDialogService DialogService

@implements IDisposable

<ScrollMonitor ScrollElementId="folderscrollarea" ScrollConfigName="FolderScrollPos" />

<div class="damselfly-folderlist">
    <div class="folder-search">
        <label for="searchBox">
            <ConflatedTextBox IconClass="fa-search" placeholder="Filter folders" OnValueChanged="@DoFilter" TextValue="@FilterTerm" />
        </label>
    </div>
    @if (folderItems == null)
    {
        <p>Loading...</p>
        <Spinner />
    }
    else
    {
        <div class="folder-entry @FolderStyle( -1 )" @onclick="@(() => ResetFilterFolder())"
             @oncontextmenu=@(args => ShowContextMenu(args, null)) @oncontextmenu:preventDefault="true">
            <i class="fa fa-folder-open folder-icon" /> All Folders
        </div>
        <div class="folder-scroll-area" id="folderscrollarea">
            <Virtualize @ref="folderContainer" Items="@folderItems" ItemSize="15">
                <div class="folder-entry @FolderStyle(context.FolderId)" 
                     @oncontextmenu=@(args => ShowContextMenu(args, context)) @oncontextmenu:preventDefault="true">
                    <i style="@IndentMargin(context)" class="fa @FolderIcon(context) folder-icon" @onclick="@(() => ToggleExpand(context))" />
                    <span @onclick="@(() => SetFilterFolder(context))" title="@context.Path">
                        @context.FolderItem.DisplayName (@context.FolderItem.ImageCount)
                    </span>
                </div>
            </Virtualize>
        </div>
    }
</div>

@code {
    private string filterTerm;
    public string FilterTerm { get { return filterTerm; } }
    private Virtualize<Folder> folderContainer;
    private List<Folder> folderItems;
    Folder SelectedItem { get; set; }

    void ShowContextMenu(MouseEventArgs args, Folder folder)
    {
        string refreshText = "Refresh Folder";
        string selectText = "Select Folder";

        if( folder == null )
        {
            refreshText = "Refresh All Folders";
            selectText = "Clear Folder Selection";
        }

        contextMenuService.Open(args,
        new List<ContextMenuItem>() {
                new ContextMenuItem(){ Text = selectText, Value = 0 },
                new ContextMenuItem(){ Text = refreshText, Value = 1 },
             }, (args) =>
             {
                 contextMenuService.Close();
                 switch (args.Value)
                 {
                     case 0: if (folder == null) ResetFilterFolder(); else SetFilterFolder(folder); break;
                     case 1: _ = ShowRescanDialog( folder ); break;
                 }
             });
    }

    private async Task ShowRescanDialog( Folder folder )
    {
        var parameters = new DialogParameters { { "allimages", true } };

        if( folder != null )
            parameters = new DialogParameters { { "folder", folder }, { "count", folder.FolderItem.ImageCount } };

        var options = new MudBlazor.DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true };
        var dialog = DialogService.Show<RescanDialog>("Re-scan Images", parameters, options);
        var result = await dialog.Result;
    }

    protected void SelectionChanged(Folder f)
    {
        //Logging.Log($"Selected folder {f.FolderId}");
    }

    string FolderIcon(Folder folder)
    {
        if (folder.FolderItem.IsExpanded)
            return "fa-folder-open";

        return "fa-folder";
    }

    string IndentMargin( Folder folder )
    {
        return $"margin-left:{folder.FolderItem.Depth * 10}px;";
    }

    string FolderStyle(int folderId)
    {
        if (folderId == -1 && searchService.Folder == null)
            return "folder-entry-selected";

        if (searchService.Folder?.FolderId == folderId)
            return "folder-entry-selected";

        return string.Empty;
    }

    private void DoFilter(string searchTerm)
    {
        if (filterTerm != searchTerm)
        {
            filterTerm = searchTerm;
            OnFoldersChanged();
        }
    }

    void ResetFilterFolder()
    {
        searchService.Folder = null;
        StateHasChanged();
    }

    void SetFilterFolder(Folder folder)
    {
        searchService.Folder = folder;
        StateHasChanged();
    }

    protected async Task ToggleExpand( Folder item )
    {
        userFolderService.ToggleExpand(item);

        await ProcessUpdatedFilter();
    }

    protected async Task ProcessUpdatedFilter()
    {
        folderItems = await userFolderService.GetFilteredFolders(filterTerm);

        await InvokeAsync(StateHasChanged);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            folderService.OnChange += OnFoldersChanged;
            searchService.OnSearchChanged += OnSearchChanged;

            // Kick off the data load
            await ProcessUpdatedFilter();
        }
    }

    public void Dispose()
    {
        folderService.OnChange -= OnFoldersChanged;
        searchService.OnSearchChanged -= OnSearchChanged;
    }

    private void OnFoldersChanged()
    {
        // Be careful of threading - we may get called from anywhere
        _ = ProcessUpdatedFilter();
    }

    private void OnSearchChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
