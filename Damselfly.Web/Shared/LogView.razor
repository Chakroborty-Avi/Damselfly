
@inject ViewDataService ViewDataService
@inject UserStatusService statusService

<div class="damselfly-logview">
    @if (logLines == null || !logLines.Any())
    {
        <p>Loading log entries....</p>
    }
    else
    {
<div class="damselfly-searchbar">
    <div class="damselfly-browsetools">
        <h4 @onclick="DownloadLogFile">@LogFileName</h4>
        &nbsp;
        &nbsp;
        &nbsp;
        <select class="damselfly-browsetool damselfly-browsetool-select" @bind="SelectedFilter">
            <option value="ALL">Show All Logs</option>
            <option value="INF">Show Info</option>
            <option value="WRN">Show Warnings</option>
            <option value="ERR">Show Errors</option>
        </select>
    </div>
    <div class="log-scroll-area">
        <div class="log-table">
            <table class="loglist-table">
                <thead>
                    <tr>
                        <th class="timestamp">Timestamp</th>
                        <th class="level">Log Level</th>
                        <th class="entry">Entry</th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Items="@filteredLogs" Context="line" ItemSize="15">
                        <tr>
                            <td class="timestamp">@line.date</td>
                            <td class="level log-level-@line.level">@line.level</td>
                            <td class="entry">@line.entry</td>
                        </tr>
                    </Virtualize>
                </tbody>
            </table>
        </div>
    </div>
</div>
    }
</div>

@code {

    class LogEntry
    {
        public string date { get; set; }
        public string level { get; set; }
        public string entry { get; set; }
        public string thread { get; set; }
    }

    List<LogEntry> logLines = new List<LogEntry>();
    private string LogFileName { get; set; }
    private string SelectedFilter { get; set; } = "ALL";

    private List<LogEntry> filteredLogs => logLines.Where(x => SelectedFilter == "ALL" || x.level == SelectedFilter).ToList();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _ = GetLogLines();
    }

    private async Task DownloadLogFile()
    {
        // TODO: Download log file here
        await Task.Delay(500);
    }

    private async Task GetLogLines()
    {
        LogEntry[] result = new LogEntry[0];

        var logDir = new DirectoryInfo(Logging.LogFolder);
        var file = logDir.GetFiles("*.log")
                         .OrderByDescending(x => x.LastWriteTimeUtc)
                         .FirstOrDefault();

        if (file != null)
        {
            LogFileName = file.Name;

            int page = 0, pageSize = 200;
            try
            {
                var reader = new ReverseLineReader(file.FullName);

                while( true )
                {
                    var lines = reader.Skip( page++ * pageSize )
                                 .Take( pageSize )
                                 .Select( x => CreateLogEntry(x) )
                                 .ToList();

                    if (lines.Any())
                    {
                        logLines.AddRange(lines);
                        await InvokeAsync(StateHasChanged);
                        statusService.StatusText = $"Loaded {logLines.Count()} log lines...";
                    }
                    else
                        break;
                }
            }
            catch (Exception ex)
            {
                Logging.LogError($"Exception reading logs: {ex}");
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
                statusService.StatusText = $"Loaded {logLines.Count()} log lines.";
            }
        }
    }

    // TODO: Use a regex here
    private LogEntry CreateLogEntry(string s)
    {
        var e = new LogEntry();
        if (!string.IsNullOrWhiteSpace(s) && s.StartsWith('['))
        {
            try
            {
                string[] parts = s.Split(']');
                if (parts.Length > 1)
                {
                    e.entry = parts[1];

                    string[] parts2 = parts[0].Substring(1).Split('-');
                    e.date = parts2[0];
                    e.thread = parts2[1];
                    e.level = parts2[2];
                }
            }
            catch (Exception)
            {
                // Don't log - we'll get an infinite loop!
            }
        }

        return e;
    }
}
