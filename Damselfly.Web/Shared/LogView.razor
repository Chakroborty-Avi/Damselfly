
@inject ViewDataService ViewDataService
@inject UserStatusService statusService

<div class="damselfly-logview">
    @if (logLines == null || !logLines.Any())
    {
        <p>Loading log entries....</p>
    }
    else
    {
        <div class="log-scroll-area">
            <h4 @onclick="DownloadLogFile">@LogFileName</h4>
            <div class="log-table">
                <table class="loglist-table">
                    <thead>
                        <tr>
                            <th class="timestamp">Timestamp</th>
                            <th class="level">Log Level</th>
                            <th class="entry">Entry</th>
                            <th class="thread">Thread</th>
                        </tr>
                    </thead>
                    <tbody>
                        <Virtualize Items="@logLines" ItemSize="15">
                            @foreach (var line in logLines)
                            {
                                <tr>
                                    <td class="timestamp">@line.date</td>
                                    <td class="level log-level-@line.level">@line.level</td>
                                    <td class="entry">@line.entry</td>
                                    <td class="thread">@line.thread</td>
                                </tr>
                            }
                        </Virtualize>
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {

    class LogEntry
    {
        public string date { get; set; }
        public string level { get; set; }
        public string entry { get; set; }
        public string thread { get; set; }
    }

    List<LogEntry> logLines = new List<LogEntry>();
    private string LogFileName { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = GetLogLines();
        }
    }

    private async Task DownloadLogFile()
    {
        // TODO: Download log file here
        await Task.Delay(500);
    }

    private async Task GetLogLines()
    {
        LogEntry[] result = new LogEntry[0];

        var logDir = new DirectoryInfo(Logging.LogFolder);
        var file = logDir.GetFiles("*.log")
                         .OrderByDescending(x => x.LastWriteTimeUtc)
                         .FirstOrDefault();

        if (file != null)
        {
            LogFileName = file.Name;

            int page = 0, pageSize = 100;
            var lines = File.ReadLines(file.FullName);

            while (true)
            {
                var pageLines = lines.Skip(page * pageSize).Take(pageSize).Reverse();

                if (pageLines.Any())
                {
                    var logPage = pageLines
                                    .Select(x => CreateLogEntry(x))
                                    .ToArray();

                    logLines.AddRange(logPage);

                    page++;

                    await InvokeAsync(StateHasChanged);
                    statusService.StatusText = $"Loaded {logLines.Count()} log lines...";
                }
                else
                    break;
            }
        }
    }

    // TODO: Use a regex here
    private LogEntry CreateLogEntry(string s)
    {
        var e = new LogEntry();
        if (!string.IsNullOrWhiteSpace(s) && s.StartsWith('['))
        {
            try
            {
                string[] parts = s.Split(']');
                if (parts.Length > 1)
                {
                    e.entry = parts[1];

                    string[] parts2 = parts[0].Substring(1).Split('-');
                    e.date = parts2[0];
                    e.thread = parts2[1];
                    e.level = parts2[2];
                }
            }
            catch (Exception)
            {
                // Don't log - we'll get an infinite loop!
            }
        }

        return e;
    }
}
